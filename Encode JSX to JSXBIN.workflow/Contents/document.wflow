<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>521.1</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Run Shell Script</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>#!/bin/bash

# Check if argument was provided
if [ $# -eq 0 ]; then
    echo "No arguments provided. Please provide the path to the folder with JSX files."
    exit 1
fi

export PATH=/usr/local/bin:$PATH &amp;&amp; which node
# NODE_BIN=$(which node)
# Get the current username
USER_NAME=$(whoami)

# Path to the exportToJSXBin.js script
EXTENSION_DIR=$(ls /Users/${USER_NAME}/.vscode/extensions/ | grep "adobe.extendscript-debug-")
EXPORT_SCRIPT_PATH="/Users/${USER_NAME}/.vscode/extensions/${EXTENSION_DIR}/public-scripts/exportToJSXBin.js"
NODE_BIN="/Users/${USER_NAME}/.nvm/versions/node/v14.21.3/bin/node"

# Error log file
ERROR_LOG="/Users/${USER_NAME}/Desktop/JSXBIN_errors.log"

# Directory containing jsx files to convert
SOURCE_DIR="$1"

# Creating a new directory with "encoded" at the end
ENCODED_DIR="${SOURCE_DIR}_encoded"

# Check is correct Node version exists
if test -f "$NODE_BIN"; then
    echo "NODE_BIN directory exists"
else

USER_RESPONSE=$(osascript &lt;&lt;EOF
set dialogResult to "OK"
try
    display dialog "Node.js version 14.21.3 is not found. You need to install NVM and Node.js v14.21.3. Please check Quick Action manual here: https://github.com/axwt/folder-to-jsxbin" buttons {"Cancel", "OK"} default button "OK"
on error
    set dialogResult to "Cancel"
end try
return dialogResult
EOF
)
    echo "Node.js version 14.21.3 is not found" &gt;&gt; "$ERROR_LOG"
    echo "NODE_BIN directory does not exist"
    exit 1;
fi


## Start processing folder/files

nvm use v14.21.3

mkdir -p "$ENCODED_DIR"

# Copying the original directory into the new one
cp -r "$SOURCE_DIR"/* "$ENCODED_DIR"

# Boolean flag to track if any error occurred
ERROR_OCCURRED=false

JSX_FILE_COUNT=$(find "$ENCODED_DIR" -name '*.jsx' -type f | wc -l | tr -d '[:space:]')
# JSX_FILE_COUNT
# echo "Number of JSX files: $JSX_FILE_COUNT"

# Finding and converting each .jsx file recursively in all subdirectories
COUNTER=0
find "$ENCODED_DIR" -name '*.jsx' -type f | while read file; do
  COUNTER=$((COUNTER + 1))
  osascript -e "display notification \"Processing file: $(basename "$file") ($COUNTER from $JSX_FILE_COUNT)\" with title \"Converting...\""
  echo "Converting $file to jsxbin..."
  echo $NODE_BIN "$EXPORT_SCRIPT_PATH" -f -n "$file"
  OUTPUT=$($NODE_BIN "$EXPORT_SCRIPT_PATH" -f -n "$file" 2&gt;&amp;1)
  if ! echo "$OUTPUT" | grep -q "Success:"; then
    # Write the error output to a log file
    echo "Error converting $file:" &gt;&gt; "$ERROR_LOG"
    echo "$OUTPUT" &gt;&gt; "$ERROR_LOG"
    # Notify the user
    osascript -e 'display notification "Some errors occurred during conversion. See JSXBIN_errors.log on your Desktop." with title "Conversion Error"'
    ERROR_OCCURRED=true
  fi
  rm "$file"
done

# Checking if encoded directory is empty
if [ -z "$(ls -A "$ENCODED_DIR")" ]; then
   echo "Removing empty directory $ENCODED_DIR"
   rmdir "$ENCODED_DIR"
fi

# Write to log file if any error occurred
if $ERROR_OCCURRED ; then
  echo "" &gt;&gt; "$ERROR_LOG"
  echo "=====================================" &gt;&gt; "$ERROR_LOG"
  echo "Current Node.js version is $NODE_BIN" &gt;&gt; "$ERROR_LOG"
  echo "=====================================" &gt;&gt; "$ERROR_LOG"
  echo "" &gt;&gt; "$ERROR_LOG"
fi

# Showing the notification
osascript -e 'display notification "All .jsx files have been converted to .jsxbin and original jsx files have been removed." with title "Conversion Complete"'
</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>1</integer>
					<key>shell</key>
					<string>/bin/bash</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>31591210-CD73-4541-914C-B498594DAA8F</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Command</string>
					<string>Run</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>76B1D962-90CF-4E83-B862-8242857F0671</string>
				<key>UUID</key>
				<string>85217B5C-BC0A-4B94-9DBB-54A60EE5417D</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>conversionLabel</key>
				<integer>0</integer>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>331.500000:909.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleID</key>
		<string>com.apple.finder</string>
		<key>applicationBundleIDsByPath</key>
		<dict>
			<key>/System/Library/CoreServices/Finder.app</key>
			<string>com.apple.finder</string>
		</dict>
		<key>applicationPath</key>
		<string>/System/Library/CoreServices/Finder.app</string>
		<key>applicationPaths</key>
		<array>
			<string>/System/Library/CoreServices/Finder.app</string>
		</array>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject.folder</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>15</integer>
		<key>processesInput</key>
		<false/>
		<key>serviceApplicationBundleID</key>
		<string>com.apple.finder</string>
		<key>serviceApplicationPath</key>
		<string>/System/Library/CoreServices/Finder.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject.folder</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<false/>
		<key>systemImageName</key>
		<string>NSTouchBarDocuments</string>
		<key>useAutomaticInputType</key>
		<false/>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
